2020-07-29 15:22:41,723 ERROR int AmqpManager::create_channel(const char*, ChannelType, consumer_msg_cb, void*, const char*, const char*, const char*, int) - ERROR: [AmqpImp] opening rabbitMq socket
2020-07-29 15:22:41,723 WARN  void AmqpManager::autoReconnect() - [AmqpManager::autoReconnect] amqp disconnected, try reconnecting...
2020-07-29 15:22:41,724 INFO  void HomePage::initHttpServer() - "Http server start success! port = 8080"
2020-07-29 15:22:41,726 INFO  int HttpAPI::Init() - HttpLib init finished
2020-07-29 15:22:41,727 ERROR int HttpAPI::setHeader(QString&, QString&) - "LIBSetHeaderEx res:2003"
2020-07-29 15:22:41,727 ERROR int HttpAPI::setHeader(QString&, QString&) - "LIBSetHeaderEx res:2003"
2020-07-29 15:22:41,727 ERROR int HttpAPI::setHeader(QString&, QString&) - "LIBSetHeaderEx res:2003"
2020-07-29 15:22:41,727 ERROR int HttpAPI::setHeader(QString&, QString&) - "LIBSetHeaderEx res:2003"
2020-07-29 15:22:41,727 ERROR int HttpAPI::setHeader(QString&, QString&) - "LIBSetHeaderEx res:2003"
2020-07-29 15:22:41,727 WARN  int SerialPortSer::Init() - "SerialPortSer[ReadTicketInfo] init FAILED! port(ttyUSB0), bautRate(115200), opened_total_count = 0"
2020-07-29 15:22:41,727 WARN  int SerialPortSer::Init() - "SerialPortSer[SendDepartureInfo] init FAILED! port(ttyUSB1), bautRate(9600), opened_total_count = 0"
2020-07-29 15:22:41,728 WARN  void IDCardLoader::init(int, int, const QString&) - "IDCardReader init failed, error code = -1"
2020-07-29 15:22:41,730 ERROR Return_Flight_Plan_Param HttpAPI::getFlightPlan(const QString&) - "LIBPostSynEx failed, res:3" QThread(0x7ffc4389c0d0)
2020-07-29 15:22:45,641 INFO  HomePage::showSignInDlg()::<lambda()> - [Sign In Success]
2020-07-29 15:22:51,739 ERROR void AmqpManager::autoReconnect() - ERROR: [AmqpImp] opening rabbitMq socket
2020-07-29 15:22:56,739 WARN  void AmqpManager::autoReconnect() - [AmqpManager::autoReconnect] amqp disconnected, try reconnecting...
2020-07-29 15:23:01,121 ERROR Return_Flight_Plan_Param HttpAPI::queryFlight(const QString&, const QDate&) - "LIBPostSynEx failed, res:3" QThread(0xc8fb00)
2020-07-29 15:23:06,748 ERROR void AmqpManager::autoReconnect() - ERROR: [AmqpImp] opening rabbitMq socket
2020-07-29 15:23:11,748 WARN  void AmqpManager::autoReconnect() - [AmqpManager::autoReconnect] amqp disconnected, try reconnecting...
2020-07-29 15:23:26,756 ERROR void AmqpManager::autoReconnect() - ERROR: [AmqpImp] opening rabbitMq socket
2020-07-29 15:23:31,756 WARN  void AmqpManager::autoReconnect() - [AmqpManager::autoReconnect] amqp disconnected, try reconnecting...
2020-07-29 15:23:41,759 ERROR void AmqpManager::autoReconnect() - ERROR: [AmqpImp] opening rabbitMq socket
2020-07-29 15:23:46,760 WARN  void AmqpManager::autoReconnect() - [AmqpManager::autoReconnect] amqp disconnected, try reconnecting...
2020-07-29 15:26:01,392 ERROR void AmqpManager::autoReconnect() - ERROR: [AmqpImp] opening rabbitMq socket
2020-07-29 15:26:06,392 WARN  void AmqpManager::autoReconnect() - [AmqpManager::autoReconnect] amqp disconnected, try reconnecting...
2020-07-29 15:28:20,656 ERROR void AmqpManager::autoReconnect() - ERROR: [AmqpImp] opening rabbitMq socket
2020-07-29 15:28:25,656 WARN  void AmqpManager::autoReconnect() - [AmqpManager::autoReconnect] amqp disconnected, try reconnecting...
2020-07-29 15:28:35,665 ERROR void AmqpManager::autoReconnect() - ERROR: [AmqpImp] opening rabbitMq socket
2020-07-29 15:28:40,665 WARN  void AmqpManager::autoReconnect() - [AmqpManager::autoReconnect] amqp disconnected, try reconnecting...
2020-07-29 15:28:50,674 ERROR void AmqpManager::autoReconnect() - ERROR: [AmqpImp] opening rabbitMq socket
2020-07-29 15:28:55,675 WARN  void AmqpManager::autoReconnect() - [AmqpManager::autoReconnect] amqp disconnected, try reconnecting...
2020-07-29 15:29:00,678 ERROR void AmqpManager::autoReconnect() - ERROR: [AmqpImp] opening rabbitMq socket
2020-07-29 15:29:05,678 WARN  void AmqpManager::autoReconnect() - [AmqpManager::autoReconnect] amqp disconnected, try reconnecting...
2020-07-29 15:29:10,700 ERROR void AmqpManager::autoReconnect() - ERROR: [AmqpImp] opening rabbitMq socket
2020-07-29 15:29:15,700 WARN  void AmqpManager::autoReconnect() - [AmqpManager::autoReconnect] amqp disconnected, try reconnecting...
2020-07-29 15:33:36,048 ERROR void AmqpManager::autoReconnect() - ERROR: [AmqpImp] opening rabbitMq socket
2020-07-29 15:33:41,049 WARN  void AmqpManager::autoReconnect() - [AmqpManager::autoReconnect] amqp disconnected, try reconnecting...
2020-07-29 15:33:46,053 ERROR void AmqpManager::autoReconnect() - ERROR: [AmqpImp] opening rabbitMq socket
2020-07-29 15:33:51,053 WARN  void AmqpManager::autoReconnect() - [AmqpManager::autoReconnect] amqp disconnected, try reconnecting...
2020-07-29 15:33:51,093 ERROR Return_Flight_Plan_Param HttpAPI::queryFlight(const QString&, const QDate&) - "LIBPostSynEx failed, res:3" QThread(0xc8fb00)
2020-07-29 15:33:56,056 ERROR void AmqpManager::autoReconnect() - ERROR: [AmqpImp] opening rabbitMq socket
2020-07-29 15:34:01,056 WARN  void AmqpManager::autoReconnect() - [AmqpManager::autoReconnect] amqp disconnected, try reconnecting...
2020-07-29 15:34:01,063 ERROR void AmqpManager::autoReconnect() - ERROR: [AmqpImp] opening rabbitMq socket
2020-07-29 15:34:06,064 WARN  void AmqpManager::autoReconnect() - [AmqpManager::autoReconnect] amqp disconnected, try reconnecting...
2020-07-29 15:34:06,091 ERROR void AmqpManager::autoReconnect() - ERROR: [AmqpImp] opening rabbitMq socket
2020-07-29 15:34:07,327 ERROR Return_Flight_Plan_Param HttpAPI::queryFlight(const QString&, const QDate&) - "LIBPostSynEx failed, res:3" QThread(0xc8fb00)
2020-07-29 15:34:11,091 WARN  void AmqpManager::autoReconnect() - [AmqpManager::autoReconnect] amqp disconnected, try reconnecting...
2020-07-29 15:35:35,539 INFO  int AmqpImp::setup_connection() - "Amqp server init success! port = 5672"
2020-07-29 15:35:35,545 INFO  void HomePage::initHttpServer() - "Http server start success! port = 8081"
2020-07-29 15:35:35,547 INFO  int HttpAPI::Init() - HttpLib init finished
2020-07-29 15:35:35,547 WARN  int SerialPortSer::Init() - "SerialPortSer[ReadTicketInfo] init FAILED! port(ttyUSB0), bautRate(115200), opened_total_count = 0"
2020-07-29 15:35:35,547 WARN  int SerialPortSer::Init() - "SerialPortSer[SendDepartureInfo] init FAILED! port(ttyUSB1), bautRate(9600), opened_total_count = 0"
2020-07-29 15:35:35,548 WARN  void IDCardLoader::init(int, int, const QString&) - "IDCardReader init failed, error code = -1"
2020-07-29 15:35:35,549 INFO  Return_Flight_Plan_Param HttpAPI::getFlightPlan(const QString&) - "[post <192.168.10.184:9091/jms-server/api/v1/face/boarding/flightplan> send body]: \n" QJsonObject({"gateNo":"10","reqId":"5790c0846f0b44c2b3b769bd40df39d7"})
2020-07-29 15:35:35,569 INFO  Return_Flight_Plan_Param HttpAPI::getFlightPlan(const QString&) - "post </api/v1/face/boarding/flightplan/api/v1/face/boarding/flightplan> response: \n" QJsonObject({"error":"Internal Server Error","exception":"com.netflix.zuul.exception.ZuulException","message":"Filter threw Exception","path":"/jms-server/api/v1/face/boarding/flightplan","status":500,"timestamp":1596008148154})
2020-07-29 15:35:38,922 INFO  HomePage::showSignInDlg()::<lambda()> - [Sign In Success]
2020-07-29 15:36:04,537 INFO  FlowReviewResponse HttpAPI::enquiryPPL(const FlowReviewRequest&) - "[post ProcessRecording <192.168.10.25:9090/data-platform-server/api/v1/face/data/flowback-query> send body]: \n" QJsonObject({"boardingNumber":"","cardId":"15043019970907062A","flightDay":"-1","flightNo":"","isFuzzyQuery":0,"reqId":"5790c0846f0b44c2b3b769bd40df39d7"})
2020-07-29 15:36:04,834 INFO  FlowReviewResponse HttpAPI::enquiryPPL(const FlowReviewRequest&) - "post ProcessRecording <192.168.10.25:9090/data-platform-server/api/v1/face/data/flowback-query> response: \n" QJsonDocument({"msg":"Success","reqId":"5790c0846f0b44c2b3b769bd40df39d7","result":[{"boardingInfo":null,"reviewInfo":{"channelName":"A通道","deviceId":"T1AF001","gateNo":"T1AF1","id":"454322b0d0284823857e601179920c0c","passStatus":0,"passTime":"20200729152939","passType":2,"photoPath":"http://172.18.2.25:9090/data-platform-server/api/v1/resource/group1/M00/0E/2E/ooYBAF8hJYOABvNuAAAx95iYOjA085.jpg"},"securityInfo":{"channelName":"A通道","deviceId":"T1AJ001","gateNo":"T1AJ1","passStatus":0,"passTime":"20200729152916","passType":2,"photoPath":"http://172.18.2.25:9090/data-platform-server/api/v1/resource/group1/M00/0F/E3/oYYBAF8hJVyAHGkAAAAx95iYOjA739.jpg","uuId":"8f8cc94dd2194929bea6d609db7c0df3"},"transferInfo":null,"userInfo":{"boardingNumber":"001","certificateNumber":"15043019970907062A","endPort":"XIL","flightDay":"20200729","flightInfos":null,"flightNo":"GS6619","gateNo":"03A","hasBaby":0,"isDelete":1,"isFocus":0,"isSpecialChannel":0,"moreTicket":0,"passengerEnglishName":"HOURUIGANG","passengerName":"name","seatId":"001A","startPort":"HET"}}],"status":0})
2020-07-29 15:51:17,320 INFO  int AmqpImp::setup_connection() - "Amqp server init success! port = 5672"
2020-07-29 15:51:17,326 INFO  void HomePage::initHttpServer() - "Http server start success! port = 8081"
2020-07-29 15:51:17,328 INFO  int HttpAPI::Init() - HttpLib init finished
2020-07-29 15:51:17,328 WARN  int SerialPortSer::Init() - "SerialPortSer[ReadTicketInfo] init FAILED! port(ttyUSB0), bautRate(115200), opened_total_count = 0"
2020-07-29 15:51:17,328 WARN  int SerialPortSer::Init() - "SerialPortSer[SendDepartureInfo] init FAILED! port(ttyUSB1), bautRate(9600), opened_total_count = 0"
2020-07-29 15:51:17,328 WARN  void IDCardLoader::init(int, int, const QString&) - "IDCardReader init failed, error code = -1"
2020-07-29 15:51:17,330 INFO  Return_Flight_Plan_Param HttpAPI::getFlightPlan(const QString&) - "[post <192.168.10.184:9091/jms-server/api/v1/face/boarding/flightplan> send body]: \n" QJsonObject({"gateNo":"10","reqId":"9222c11d7a14472fb201eb81e18ab705"})
2020-07-29 15:51:17,348 INFO  Return_Flight_Plan_Param HttpAPI::getFlightPlan(const QString&) - "post </api/v1/face/boarding/flightplan/api/v1/face/boarding/flightplan> response: \n" QJsonObject({"error":"Internal Server Error","exception":"com.netflix.zuul.exception.ZuulException","message":"Filter threw Exception","path":"/jms-server/api/v1/face/boarding/flightplan","status":500,"timestamp":1596009089899})
2020-07-29 15:51:23,212 INFO  HomePage::showSignInDlg()::<lambda()> - [Sign In Success]
2020-07-29 15:51:53,392 INFO  FlowReviewResponse HttpAPI::enquiryPPL(const FlowReviewRequest&) - "[post ProcessRecording <192.168.10.25:9090/data-platform-server/api/v1/face/data/flowback-query> send body]: \n" QJsonObject({"boardingNumber":"","cardId":"15043019970907062A","flightDay":"-1","flightNo":"","isFuzzyQuery":0,"reqId":"9222c11d7a14472fb201eb81e18ab705"})
2020-07-29 15:51:53,423 INFO  FlowReviewResponse HttpAPI::enquiryPPL(const FlowReviewRequest&) - "post ProcessRecording <192.168.10.25:9090/data-platform-server/api/v1/face/data/flowback-query> response: \n" QJsonDocument({"msg":"Success","reqId":"9222c11d7a14472fb201eb81e18ab705","result":[{"boardingInfo":null,"reviewInfo":{"channelName":"A通道","deviceId":"T1AF001","gateNo":"T1AF1","id":"454322b0d0284823857e601179920c0c","passStatus":0,"passTime":"20200729152939","passType":2,"photoPath":"http://172.18.2.25:9090/data-platform-server/api/v1/resource/group1/M00/0E/2E/ooYBAF8hJYOABvNuAAAx95iYOjA085.jpg"},"securityInfo":{"channelName":"A通道","deviceId":"T1AJ001","gateNo":"T1AJ1","passStatus":0,"passTime":"20200729152916","passType":2,"photoPath":"http://172.18.2.25:9090/data-platform-server/api/v1/resource/group1/M00/0F/E3/oYYBAF8hJVyAHGkAAAAx95iYOjA739.jpg","uuId":"8f8cc94dd2194929bea6d609db7c0df3"},"transferInfo":null,"userInfo":{"boardingNumber":"001","certificateNumber":"15043019970907062A","endPort":"XIL","flightDay":"20200729","flightInfos":null,"flightNo":"GS6619","gateNo":"03A","hasBaby":0,"isDelete":1,"isFocus":0,"isSpecialChannel":0,"moreTicket":0,"passengerEnglishName":"HOURUIGANG","passengerName":"name","seatId":"001A","startPort":"HET"}}],"status":0})
2020-07-29 15:52:15,438 INFO  int AmqpImp::setup_connection() - "Amqp server init success! port = 5672"
2020-07-29 15:52:15,445 INFO  void HomePage::initHttpServer() - "Http server start success! port = 8081"
2020-07-29 15:52:15,447 INFO  int HttpAPI::Init() - HttpLib init finished
2020-07-29 15:52:15,447 WARN  int SerialPortSer::Init() - "SerialPortSer[ReadTicketInfo] init FAILED! port(ttyUSB0), bautRate(115200), opened_total_count = 0"
2020-07-29 15:52:15,447 WARN  int SerialPortSer::Init() - "SerialPortSer[SendDepartureInfo] init FAILED! port(ttyUSB1), bautRate(9600), opened_total_count = 0"
2020-07-29 15:52:15,448 WARN  void IDCardLoader::init(int, int, const QString&) - "IDCardReader init failed, error code = -1"
2020-07-29 15:52:15,450 INFO  Return_Flight_Plan_Param HttpAPI::getFlightPlan(const QString&) - "[post <192.168.10.184:9091/jms-server/api/v1/face/boarding/flightplan> send body]: \n" QJsonObject({"gateNo":"10","reqId":"b87c71b621524a078d9316955ebbbd0d"})
2020-07-29 15:52:15,469 INFO  Return_Flight_Plan_Param HttpAPI::getFlightPlan(const QString&) - "post </api/v1/face/boarding/flightplan/api/v1/face/boarding/flightplan> response: \n" QJsonObject({"error":"Internal Server Error","exception":"com.netflix.zuul.exception.ZuulException","message":"Filter threw Exception","path":"/jms-server/api/v1/face/boarding/flightplan","status":500,"timestamp":1596009148022})
2020-07-29 15:52:19,208 INFO  HomePage::showSignInDlg()::<lambda()> - [Sign In Success]
2020-07-29 15:53:34,138 INFO  int AmqpImp::setup_connection() - "Amqp server init success! port = 5672"
2020-07-29 15:53:34,144 INFO  void HomePage::initHttpServer() - "Http server start success! port = 8081"
2020-07-29 15:53:34,146 INFO  int HttpAPI::Init() - HttpLib init finished
2020-07-29 15:53:34,146 WARN  int SerialPortSer::Init() - "SerialPortSer[ReadTicketInfo] init FAILED! port(ttyUSB0), bautRate(115200), opened_total_count = 0"
2020-07-29 15:53:34,146 WARN  int SerialPortSer::Init() - "SerialPortSer[SendDepartureInfo] init FAILED! port(ttyUSB1), bautRate(9600), opened_total_count = 0"
2020-07-29 15:53:34,146 WARN  void IDCardLoader::init(int, int, const QString&) - "IDCardReader init failed, error code = -1"
2020-07-29 15:53:34,148 INFO  Return_Flight_Plan_Param HttpAPI::getFlightPlan(const QString&) - "[post <192.168.10.184:9091/jms-server/api/v1/face/boarding/flightplan> send body]: \n" QJsonObject({"gateNo":"10","reqId":"3853ce3f65bb4dcbb9f6c9158d92ca11"})
2020-07-29 15:53:34,170 INFO  Return_Flight_Plan_Param HttpAPI::getFlightPlan(const QString&) - "post </api/v1/face/boarding/flightplan/api/v1/face/boarding/flightplan> response: \n" QJsonObject({"error":"Internal Server Error","exception":"com.netflix.zuul.exception.ZuulException","message":"Filter threw Exception","path":"/jms-server/api/v1/face/boarding/flightplan","status":500,"timestamp":1596009226727})
2020-07-29 15:53:37,165 INFO  HomePage::showSignInDlg()::<lambda()> - [Sign In Success]
2020-07-29 15:53:47,315 INFO  FlowReviewResponse HttpAPI::enquiryPPL(const FlowReviewRequest&) - "[post ProcessRecording <192.168.10.25:9090/data-platform-server/api/v1/face/data/flowback-query> send body]: \n" QJsonObject({"boardingNumber":"","cardId":"15043019970907062A","flightDay":"-1","flightNo":"","isFuzzyQuery":0,"reqId":"3853ce3f65bb4dcbb9f6c9158d92ca11"})
2020-07-29 15:53:47,329 INFO  FlowReviewResponse HttpAPI::enquiryPPL(const FlowReviewRequest&) - "post ProcessRecording <192.168.10.25:9090/data-platform-server/api/v1/face/data/flowback-query> response: \n" QJsonDocument({"msg":"Success","reqId":"3853ce3f65bb4dcbb9f6c9158d92ca11","result":[{"boardingInfo":null,"reviewInfo":{"channelName":"A通道","deviceId":"T1AF001","gateNo":"T1AF1","id":"454322b0d0284823857e601179920c0c","passStatus":0,"passTime":"20200729152939","passType":2,"photoPath":"http://172.18.2.25:9090/data-platform-server/api/v1/resource/group1/M00/0E/2E/ooYBAF8hJYOABvNuAAAx95iYOjA085.jpg"},"securityInfo":{"channelName":"A通道","deviceId":"T1AJ001","gateNo":"T1AJ1","passStatus":0,"passTime":"20200729152916","passType":2,"photoPath":"http://172.18.2.25:9090/data-platform-server/api/v1/resource/group1/M00/0F/E3/oYYBAF8hJVyAHGkAAAAx95iYOjA739.jpg","uuId":"8f8cc94dd2194929bea6d609db7c0df3"},"transferInfo":null,"userInfo":{"boardingNumber":"001","certificateNumber":"15043019970907062A","endPort":"XIL","flightDay":"20200729","flightInfos":null,"flightNo":"GS6619","gateNo":"03A","hasBaby":0,"isDelete":1,"isFocus":0,"isSpecialChannel":0,"moreTicket":0,"passengerEnglishName":"HOURUIGANG","passengerName":"name","seatId":"001A","startPort":"HET"}}],"status":0})
2020-07-29 15:54:26,078 INFO  int AmqpImp::setup_connection() - "Amqp server init success! port = 5672"
2020-07-29 15:54:26,085 INFO  void HomePage::initHttpServer() - "Http server start success! port = 8081"
2020-07-29 15:54:26,086 INFO  int HttpAPI::Init() - HttpLib init finished
2020-07-29 15:54:26,087 WARN  int SerialPortSer::Init() - "SerialPortSer[ReadTicketInfo] init FAILED! port(ttyUSB0), bautRate(115200), opened_total_count = 0"
2020-07-29 15:54:26,087 WARN  int SerialPortSer::Init() - "SerialPortSer[SendDepartureInfo] init FAILED! port(ttyUSB1), bautRate(9600), opened_total_count = 0"
2020-07-29 15:54:26,087 WARN  void IDCardLoader::init(int, int, const QString&) - "IDCardReader init failed, error code = -1"
2020-07-29 15:54:26,089 INFO  Return_Flight_Plan_Param HttpAPI::getFlightPlan(const QString&) - "[post <192.168.10.184:9091/jms-server/api/v1/face/boarding/flightplan> send body]: \n" QJsonObject({"gateNo":"10","reqId":"20569415dded4f57bce7090f243e6d58"})
2020-07-29 15:54:26,109 INFO  Return_Flight_Plan_Param HttpAPI::getFlightPlan(const QString&) - "post </api/v1/face/boarding/flightplan/api/v1/face/boarding/flightplan> response: \n" QJsonObject({"error":"Internal Server Error","exception":"com.netflix.zuul.exception.ZuulException","message":"Filter threw Exception","path":"/jms-server/api/v1/face/boarding/flightplan","status":500,"timestamp":1596009278667})
2020-07-29 15:54:32,187 INFO  HomePage::showSignInDlg()::<lambda()> - [Sign In Success]
2020-07-29 15:54:46,192 INFO  FlowReviewResponse HttpAPI::enquiryPPL(const FlowReviewRequest&) - "[post ProcessRecording <192.168.10.25:9090/data-platform-server/api/v1/face/data/flowback-query> send body]: \n" QJsonObject({"boardingNumber":"","cardId":"15043019970907062A","flightDay":"-1","flightNo":"","isFuzzyQuery":0,"reqId":"20569415dded4f57bce7090f243e6d58"})
2020-07-29 15:54:46,534 INFO  FlowReviewResponse HttpAPI::enquiryPPL(const FlowReviewRequest&) - "post ProcessRecording <192.168.10.25:9090/data-platform-server/api/v1/face/data/flowback-query> response: \n" QJsonDocument({"msg":"Success","reqId":"20569415dded4f57bce7090f243e6d58","result":[{"boardingInfo":null,"reviewInfo":{"channelName":"A通道","deviceId":"T1AF001","gateNo":"T1AF1","id":"454322b0d0284823857e601179920c0c","passStatus":0,"passTime":"20200729152939","passType":2,"photoPath":"http://172.18.2.25:9090/data-platform-server/api/v1/resource/group1/M00/0E/2E/ooYBAF8hJYOABvNuAAAx95iYOjA085.jpg"},"securityInfo":{"channelName":"A通道","deviceId":"T1AJ001","gateNo":"T1AJ1","passStatus":0,"passTime":"20200729152916","passType":2,"photoPath":"http://172.18.2.25:9090/data-platform-server/api/v1/resource/group1/M00/0F/E3/oYYBAF8hJVyAHGkAAAAx95iYOjA739.jpg","uuId":"8f8cc94dd2194929bea6d609db7c0df3"},"transferInfo":null,"userInfo":{"boardingNumber":"001","certificateNumber":"15043019970907062A","endPort":"XIL","flightDay":"20200729","flightInfos":null,"flightNo":"GS6619","gateNo":"03A","hasBaby":0,"isDelete":1,"isFocus":0,"isSpecialChannel":0,"moreTicket":0,"passengerEnglishName":"HOURUIGANG","passengerName":"name","seatId":"001A","startPort":"HET"}}],"status":0})
2020-07-29 15:56:10,012 INFO  int AmqpImp::setup_connection() - "Amqp server init success! port = 5672"
2020-07-29 15:56:10,018 INFO  void HomePage::initHttpServer() - "Http server start success! port = 8081"
2020-07-29 15:56:10,020 INFO  int HttpAPI::Init() - HttpLib init finished
2020-07-29 15:56:10,021 WARN  int SerialPortSer::Init() - "SerialPortSer[ReadTicketInfo] init FAILED! port(ttyUSB0), bautRate(115200), opened_total_count = 0"
2020-07-29 15:56:10,021 WARN  int SerialPortSer::Init() - "SerialPortSer[SendDepartureInfo] init FAILED! port(ttyUSB1), bautRate(9600), opened_total_count = 0"
2020-07-29 15:56:10,021 WARN  void IDCardLoader::init(int, int, const QString&) - "IDCardReader init failed, error code = -1"
2020-07-29 15:56:10,024 INFO  Return_Flight_Plan_Param HttpAPI::getFlightPlan(const QString&) - "[post <192.168.10.184:9091/jms-server/api/v1/face/boarding/flightplan> send body]: \n" QJsonObject({"gateNo":"10","reqId":"8398a9467e3b49fe97873c13ee57e781"})
2020-07-29 15:56:10,052 INFO  Return_Flight_Plan_Param HttpAPI::getFlightPlan(const QString&) - "post </api/v1/face/boarding/flightplan/api/v1/face/boarding/flightplan> response: \n" QJsonObject({"error":"Internal Server Error","exception":"com.netflix.zuul.exception.ZuulException","message":"Filter threw Exception","path":"/jms-server/api/v1/face/boarding/flightplan","status":500,"timestamp":1596009382613})
2020-07-29 15:56:13,111 INFO  HomePage::showSignInDlg()::<lambda()> - [Sign In Success]
2020-07-29 15:56:27,830 INFO  FlowReviewResponse HttpAPI::enquiryPPL(const FlowReviewRequest&) - "[post ProcessRecording <192.168.10.25:9090/data-platform-server/api/v1/face/data/flowback-query> send body]: \n" QJsonObject({"boardingNumber":"","cardId":"15043019970907062A","flightDay":"-1","flightNo":"","isFuzzyQuery":0,"reqId":"8398a9467e3b49fe97873c13ee57e781"})
2020-07-29 15:56:27,971 INFO  FlowReviewResponse HttpAPI::enquiryPPL(const FlowReviewRequest&) - "post ProcessRecording <192.168.10.25:9090/data-platform-server/api/v1/face/data/flowback-query> response: \n" QJsonDocument({"msg":"Success","reqId":"8398a9467e3b49fe97873c13ee57e781","result":[{"boardingInfo":null,"reviewInfo":{"channelName":"A通道","deviceId":"T1AF001","gateNo":"T1AF1","id":"454322b0d0284823857e601179920c0c","passStatus":0,"passTime":"20200729152939","passType":2,"photoPath":"http://172.18.2.25:9090/data-platform-server/api/v1/resource/group1/M00/0E/2E/ooYBAF8hJYOABvNuAAAx95iYOjA085.jpg"},"securityInfo":{"channelName":"A通道","deviceId":"T1AJ001","gateNo":"T1AJ1","passStatus":0,"passTime":"20200729152916","passType":2,"photoPath":"http://172.18.2.25:9090/data-platform-server/api/v1/resource/group1/M00/0F/E3/oYYBAF8hJVyAHGkAAAAx95iYOjA739.jpg","uuId":"8f8cc94dd2194929bea6d609db7c0df3"},"transferInfo":null,"userInfo":{"boardingNumber":"001","certificateNumber":"15043019970907062A","endPort":"XIL","flightDay":"20200729","flightInfos":null,"flightNo":"GS6619","gateNo":"03A","hasBaby":0,"isDelete":1,"isFocus":0,"isSpecialChannel":0,"moreTicket":0,"passengerEnglishName":"HOURUIGANG","passengerName":"name","seatId":"001A","startPort":"HET"}}],"status":0})
2020-07-29 15:58:20,758 INFO  int AmqpImp::setup_connection() - "Amqp server init success! port = 5672"
2020-07-29 15:58:20,765 INFO  void HomePage::initHttpServer() - "Http server start success! port = 8081"
2020-07-29 15:58:20,766 INFO  int HttpAPI::Init() - HttpLib init finished
2020-07-29 15:58:20,767 WARN  int SerialPortSer::Init() - "SerialPortSer[ReadTicketInfo] init FAILED! port(ttyUSB0), bautRate(115200), opened_total_count = 0"
2020-07-29 15:58:20,767 WARN  int SerialPortSer::Init() - "SerialPortSer[SendDepartureInfo] init FAILED! port(ttyUSB1), bautRate(9600), opened_total_count = 0"
2020-07-29 15:58:20,767 WARN  void IDCardLoader::init(int, int, const QString&) - "IDCardReader init failed, error code = -1"
2020-07-29 15:58:20,769 INFO  Return_Flight_Plan_Param HttpAPI::getFlightPlan(const QString&) - "[post <192.168.10.184:9091/jms-server/api/v1/face/boarding/flightplan> send body]: \n" QJsonObject({"gateNo":"10","reqId":"4051f871a1dc4481ac79150bf71fcc93"})
2020-07-29 15:58:20,786 INFO  Return_Flight_Plan_Param HttpAPI::getFlightPlan(const QString&) - "post </api/v1/face/boarding/flightplan/api/v1/face/boarding/flightplan> response: \n" QJsonObject({"error":"Internal Server Error","exception":"com.netflix.zuul.exception.ZuulException","message":"Filter threw Exception","path":"/jms-server/api/v1/face/boarding/flightplan","status":500,"timestamp":1596009513349})
2020-07-29 15:58:27,077 INFO  HomePage::showSignInDlg()::<lambda()> - [Sign In Success]
2020-07-29 15:58:39,139 INFO  FlowReviewResponse HttpAPI::enquiryPPL(const FlowReviewRequest&) - "[post ProcessRecording <192.168.10.25:9090/data-platform-server/api/v1/face/data/flowback-query> send body]: \n" QJsonObject({"boardingNumber":"","cardId":"15043019970907062A","flightDay":"-1","flightNo":"","isFuzzyQuery":0,"reqId":"4051f871a1dc4481ac79150bf71fcc93"})
2020-07-29 15:58:39,189 INFO  FlowReviewResponse HttpAPI::enquiryPPL(const FlowReviewRequest&) - "post ProcessRecording <192.168.10.25:9090/data-platform-server/api/v1/face/data/flowback-query> response: \n" QJsonDocument({"msg":"Success","reqId":"4051f871a1dc4481ac79150bf71fcc93","result":[{"boardingInfo":null,"reviewInfo":{"channelName":"A通道","deviceId":"T1AF001","gateNo":"T1AF1","id":"454322b0d0284823857e601179920c0c","passStatus":0,"passTime":"20200729152939","passType":2,"photoPath":"http://172.18.2.25:9090/data-platform-server/api/v1/resource/group1/M00/0E/2E/ooYBAF8hJYOABvNuAAAx95iYOjA085.jpg"},"securityInfo":{"channelName":"A通道","deviceId":"T1AJ001","gateNo":"T1AJ1","passStatus":0,"passTime":"20200729152916","passType":2,"photoPath":"http://172.18.2.25:9090/data-platform-server/api/v1/resource/group1/M00/0F/E3/oYYBAF8hJVyAHGkAAAAx95iYOjA739.jpg","uuId":"8f8cc94dd2194929bea6d609db7c0df3"},"transferInfo":null,"userInfo":{"boardingNumber":"001","certificateNumber":"15043019970907062A","endPort":"XIL","flightDay":"20200729","flightInfos":null,"flightNo":"GS6619","gateNo":"03A","hasBaby":0,"isDelete":1,"isFocus":0,"isSpecialChannel":0,"moreTicket":0,"passengerEnglishName":"HOURUIGANG","passengerName":"name","seatId":"001A","startPort":"HET"}}],"status":0})
2020-07-29 16:00:57,153 INFO  int AmqpImp::setup_connection() - "Amqp server init success! port = 5672"
2020-07-29 16:00:57,213 INFO  void HomePage::initHttpServer() - "Http server start success! port = 8081"
2020-07-29 16:00:57,216 INFO  int HttpAPI::Init() - HttpLib init finished
2020-07-29 16:00:57,217 WARN  int SerialPortSer::Init() - "SerialPortSer[ReadTicketInfo] init FAILED! port(ttyUSB0), bautRate(115200), opened_total_count = 0"
2020-07-29 16:00:57,217 WARN  int SerialPortSer::Init() - "SerialPortSer[SendDepartureInfo] init FAILED! port(ttyUSB1), bautRate(9600), opened_total_count = 0"
2020-07-29 16:00:57,217 WARN  void IDCardLoader::init(int, int, const QString&) - "IDCardReader init failed, error code = -1"
2020-07-29 16:00:57,221 INFO  Return_Flight_Plan_Param HttpAPI::getFlightPlan(const QString&) - "[post <192.168.10.184:9091/jms-server/api/v1/face/boarding/flightplan> send body]: \n" QJsonObject({"gateNo":"10","reqId":"23dd6ea4f6224ee6ae0804b5b712c61f"})
2020-07-29 16:00:57,239 INFO  Return_Flight_Plan_Param HttpAPI::getFlightPlan(const QString&) - "post </api/v1/face/boarding/flightplan/api/v1/face/boarding/flightplan> response: \n" QJsonObject({"error":"Internal Server Error","exception":"com.netflix.zuul.exception.ZuulException","message":"Filter threw Exception","path":"/jms-server/api/v1/face/boarding/flightplan","status":500,"timestamp":1596009669803})
2020-07-29 16:01:00,259 INFO  HomePage::showSignInDlg()::<lambda()> - [Sign In Success]
2020-07-29 16:01:14,529 INFO  FlowReviewResponse HttpAPI::enquiryPPL(const FlowReviewRequest&) - "[post ProcessRecording <192.168.10.25:9090/data-platform-server/api/v1/face/data/flowback-query> send body]: \n" QJsonObject({"boardingNumber":"","cardId":"15043019970907062A","flightDay":"-1","flightNo":"","isFuzzyQuery":0,"reqId":"23dd6ea4f6224ee6ae0804b5b712c61f"})
2020-07-29 16:01:14,561 INFO  FlowReviewResponse HttpAPI::enquiryPPL(const FlowReviewRequest&) - "post ProcessRecording <192.168.10.25:9090/data-platform-server/api/v1/face/data/flowback-query> response: \n" QJsonDocument({"msg":"Success","reqId":"23dd6ea4f6224ee6ae0804b5b712c61f","result":[{"boardingInfo":null,"reviewInfo":{"channelName":"A通道","deviceId":"T1AF001","gateNo":"T1AF1","id":"454322b0d0284823857e601179920c0c","passStatus":0,"passTime":"20200729152939","passType":2,"photoPath":"http://172.18.2.25:9090/data-platform-server/api/v1/resource/group1/M00/0E/2E/ooYBAF8hJYOABvNuAAAx95iYOjA085.jpg"},"securityInfo":{"channelName":"A通道","deviceId":"T1AJ001","gateNo":"T1AJ1","passStatus":0,"passTime":"20200729152916","passType":2,"photoPath":"http://172.18.2.25:9090/data-platform-server/api/v1/resource/group1/M00/0F/E3/oYYBAF8hJVyAHGkAAAAx95iYOjA739.jpg","uuId":"8f8cc94dd2194929bea6d609db7c0df3"},"transferInfo":null,"userInfo":{"boardingNumber":"001","certificateNumber":"15043019970907062A","endPort":"XIL","flightDay":"20200729","flightInfos":null,"flightNo":"GS6619","gateNo":"03A","hasBaby":0,"isDelete":1,"isFocus":0,"isSpecialChannel":0,"moreTicket":0,"passengerEnglishName":"HOURUIGANG","passengerName":"name","seatId":"001A","startPort":"HET"}}],"status":0})
2020-07-29 16:05:54,410 INFO  int AmqpImp::setup_connection() - "Amqp server init success! port = 5672"
2020-07-29 16:05:54,416 INFO  void HomePage::initHttpServer() - "Http server start success! port = 8081"
2020-07-29 16:05:54,418 INFO  int HttpAPI::Init() - HttpLib init finished
2020-07-29 16:05:54,418 WARN  int SerialPortSer::Init() - "SerialPortSer[ReadTicketInfo] init FAILED! port(ttyUSB0), bautRate(115200), opened_total_count = 0"
2020-07-29 16:05:54,418 WARN  int SerialPortSer::Init() - "SerialPortSer[SendDepartureInfo] init FAILED! port(ttyUSB1), bautRate(9600), opened_total_count = 0"
2020-07-29 16:05:54,418 WARN  void IDCardLoader::init(int, int, const QString&) - "IDCardReader init failed, error code = -1"
2020-07-29 16:05:54,420 INFO  Return_Flight_Plan_Param HttpAPI::getFlightPlan(const QString&) - "[post <192.168.10.184:9091/jms-server/api/v1/face/boarding/flightplan> send body]: \n" QJsonObject({"gateNo":"10","reqId":"b5d84830a0ad4854bd38cd381ee32182"})
2020-07-29 16:05:54,437 INFO  Return_Flight_Plan_Param HttpAPI::getFlightPlan(const QString&) - "post </api/v1/face/boarding/flightplan/api/v1/face/boarding/flightplan> response: \n" QJsonObject({"error":"Internal Server Error","exception":"com.netflix.zuul.exception.ZuulException","message":"Filter threw Exception","path":"/jms-server/api/v1/face/boarding/flightplan","status":500,"timestamp":1596009966999})
2020-07-29 16:05:57,674 INFO  HomePage::showSignInDlg()::<lambda()> - [Sign In Success]
2020-07-29 16:06:04,905 INFO  FlowReviewResponse HttpAPI::enquiryPPL(const FlowReviewRequest&) - "[post ProcessRecording <192.168.10.25:9090/data-platform-server/api/v1/face/data/flowback-query> send body]: \n" QJsonObject({"boardingNumber":"","cardId":"15043019970907062A","flightDay":"-1","flightNo":"","isFuzzyQuery":0,"reqId":"b5d84830a0ad4854bd38cd381ee32182"})
2020-07-29 16:06:04,920 INFO  FlowReviewResponse HttpAPI::enquiryPPL(const FlowReviewRequest&) - "post ProcessRecording <192.168.10.25:9090/data-platform-server/api/v1/face/data/flowback-query> response: \n" QJsonDocument({"msg":"Success","reqId":"b5d84830a0ad4854bd38cd381ee32182","result":[{"boardingInfo":null,"reviewInfo":{"channelName":"A通道","deviceId":"T1AF001","gateNo":"T1AF1","id":"454322b0d0284823857e601179920c0c","passStatus":0,"passTime":"20200729152939","passType":2,"photoPath":"http://172.18.2.25:9090/data-platform-server/api/v1/resource/group1/M00/0E/2E/ooYBAF8hJYOABvNuAAAx95iYOjA085.jpg"},"securityInfo":{"channelName":"A通道","deviceId":"T1AJ001","gateNo":"T1AJ1","passStatus":0,"passTime":"20200729152916","passType":2,"photoPath":"http://172.18.2.25:9090/data-platform-server/api/v1/resource/group1/M00/0F/E3/oYYBAF8hJVyAHGkAAAAx95iYOjA739.jpg","uuId":"8f8cc94dd2194929bea6d609db7c0df3"},"transferInfo":null,"userInfo":{"boardingNumber":"001","certificateNumber":"15043019970907062A","endPort":"XIL","flightDay":"20200729","flightInfos":null,"flightNo":"GS6619","gateNo":"03A","hasBaby":0,"isDelete":1,"isFocus":0,"isSpecialChannel":0,"moreTicket":0,"passengerEnglishName":"HOURUIGANG","passengerName":"name","seatId":"001A","startPort":"HET"}}],"status":0})
2020-07-29 16:06:37,545 INFO  FlowReviewResponse HttpAPI::enquiryPPL(const FlowReviewRequest&) - "[post ProcessRecording <192.168.10.25:9090/data-platform-server/api/v1/face/data/flowback-query> send body]: \n" QJsonObject({"boardingNumber":"001","cardId":"","flightDay":"-1","flightNo":"GS6619","isFuzzyQuery":1,"reqId":"b5d84830a0ad4854bd38cd381ee32182"})
2020-07-29 16:06:37,635 INFO  FlowReviewResponse HttpAPI::enquiryPPL(const FlowReviewRequest&) - "post ProcessRecording <192.168.10.25:9090/data-platform-server/api/v1/face/data/flowback-query> response: \n" QJsonDocument({"msg":"Success","reqId":"b5d84830a0ad4854bd38cd381ee32182","result":[{"boardingInfo":null,"reviewInfo":{"channelName":"A通道","deviceId":"T1AF001","gateNo":"T1AF1","id":"454322b0d0284823857e601179920c0c","passStatus":0,"passTime":"20200729152939","passType":2,"photoPath":"http://172.18.2.25:9090/data-platform-server/api/v1/resource/group1/M00/0E/2E/ooYBAF8hJYOABvNuAAAx95iYOjA085.jpg"},"securityInfo":{"channelName":"A通道","deviceId":"T1AJ001","gateNo":"T1AJ1","passStatus":0,"passTime":"20200729152916","passType":2,"photoPath":"http://172.18.2.25:9090/data-platform-server/api/v1/resource/group1/M00/0F/E3/oYYBAF8hJVyAHGkAAAAx95iYOjA739.jpg","uuId":"8f8cc94dd2194929bea6d609db7c0df3"},"transferInfo":null,"userInfo":{"boardingNumber":"001","certificateNumber":"15043019970907062A","endPort":"XIL","flightDay":"20200729","flightInfos":null,"flightNo":"GS6619","gateNo":"03A","hasBaby":0,"isDelete":0,"isFocus":0,"isSpecialChannel":0,"moreTicket":0,"passengerEnglishName":"HOURUIGANG","passengerName":"name","seatId":"001A","startPort":"HET"}}],"status":0})
